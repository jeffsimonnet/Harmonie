<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Hydrator\HydratorException;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\Query\Query;
use Doctrine\ODM\MongoDB\UnitOfWork;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class AppDocumentPageHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate(object $document, array $data, array $hints = array()): array
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id']) || (! empty($this->class->fieldMappings['id']['nullable']) && array_key_exists('_id', $data))) {
            $value = $data['_id'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['id']['type'];
                $return = $value instanceof \MongoDB\BSON\ObjectId ? (string) $value : $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['path']) || (! empty($this->class->fieldMappings['path']['nullable']) && array_key_exists('path', $data))) {
            $value = $data['path'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['path']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['path']->setValue($document, $return);
            $hydratedData['path'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['parent'])) {
            $reference = $data['parent'];

            if ($this->class->fieldMappings['parent']['storeAs'] !== ClassMetadata::REFERENCE_STORE_AS_ID && ! is_array($reference)) {
                throw HydratorException::associationTypeMismatch('App\Document\Page', 'parent', 'array', gettype($reference));
            }

            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['parent'], $reference);
            $identifier = ClassMetadata::getReferenceId($reference, $this->class->fieldMappings['parent']['storeAs']);
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($identifier);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['parent']->setValue($document, $return);
            $hydratedData['parent'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['level']) || (! empty($this->class->fieldMappings['level']['nullable']) && array_key_exists('level', $data))) {
            $value = $data['level'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['level']['type'];
                $return = (int) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['level']->setValue($document, $return);
            $hydratedData['level'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['slug']) || (! empty($this->class->fieldMappings['slug']['nullable']) && array_key_exists('slug', $data))) {
            $value = $data['slug'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['slug']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['slug']->setValue($document, $return);
            $hydratedData['slug'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['status']) || (! empty($this->class->fieldMappings['status']['nullable']) && array_key_exists('status', $data))) {
            $value = $data['status'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['status']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['status']->setValue($document, $return);
            $hydratedData['status'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['title']) || (! empty($this->class->fieldMappings['title']['nullable']) && array_key_exists('title', $data))) {
            $value = $data['title'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['title']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['title']->setValue($document, $return);
            $hydratedData['title'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['zone'])) {
            $reference = $data['zone'];

            if ($this->class->fieldMappings['zone']['storeAs'] !== ClassMetadata::REFERENCE_STORE_AS_ID && ! is_array($reference)) {
                throw HydratorException::associationTypeMismatch('App\Document\Page', 'zone', 'array', gettype($reference));
            }

            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['zone'], $reference);
            $identifier = ClassMetadata::getReferenceId($reference, $this->class->fieldMappings['zone']['storeAs']);
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($identifier);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['zone']->setValue($document, $return);
            $hydratedData['zone'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['type']) || (! empty($this->class->fieldMappings['type']['nullable']) && array_key_exists('type', $data))) {
            $value = $data['type'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['type']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['type']->setValue($document, $return);
            $hydratedData['type'] = $return;
        }

        /** @Field(type="hash") */
        if (isset($data['content']) || (! empty($this->class->fieldMappings['content']['nullable']) && array_key_exists('content', $data))) {
            $value = $data['content'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['content']['type'];
                $return = $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['content']->setValue($document, $return);
            $hydratedData['content'] = $return;
        }
        return $hydratedData;
    }
}